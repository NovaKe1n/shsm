#!/usr/bin/env bash

#title|ssm
#version|0.4
#author|NovaKe1n
#info|Shell Script Manager 



# Global variables
version=0.4.1



# Script's absolute path
# Don't add any / at the end
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/bin"

# Check if the path exist
if [ ! -d $script_dir ]; then
    printf "[error]: path not valid!\n"
    printf " [info]: change the variable \"script_dir\" to fix the problem\n"
    exit 1
fi



# Header will print the name of the script and its version
header () 
{ 
	printf "\n%15s - %s\n\n" "[$(basename $0)]" "[v$version]"
}



# Current version, deprecated?
version ()
{
	printf "$(basename $0) $version\n"
}



# Help manual
helpme ()
{
	printf """Usage: $(basename $0) [options] [package/keyword]

  -l, --list                list all scripts
  -s, --search <keyword>    search script using a keyword
  -i, --info                view script info
  -h, --help                print this help
  -v, --version             current version

"""
	exit 0
}



# Script list output every binaries inside the local bin folder.
# For which the type of script will be displayed as well as its
# description.
script_list ()
{
	# Iterate each script located into the binaries folder and get:
	#  - script name
	#  - file type
	#  - description

    # If you want to adjust the space between each column change the values of printf:
    # printf "%-XXs" ...
    #           |
    #       This one

	for file in $script_dir/*; do
        # Script name
		printf "%-15s | " "$(basename $file)"
        # File type
		printf "%-7s | " "$(awk -F'/' 'NR==1 {print $NF}' $file | sed 's/env //')"
        # Description
		printf "%s\n" "$(egrep -m 1 '#info' $file | cut -d'|' -f2)"
	done; echo;

	exit 0
}



# Script search looks into the local binaries for a given keyword
# and output every match found.
script_search() 
{
	# Flag for no match found
	return_code=1

	# Argument check in case no keyword has been given by the user.
	[ -z "$1" ] && printf "[error] missing search parameter\n" && exit 1

	# Iterate each script located into the binaries folder.
    # egrep search for #info tag ignore case-sensitive
	for file in $script_dir/*; do
		if [ "$(egrep -s -m 1 '#info' $file | egrep -i $1)" ]; then
			printf "[%s]\n" "$(basename $file)"
			printf "  %s\n" "$(egrep -m 1 '#info' $file | egrep $1 | awk -F'|' '{print $2}')" 

			# Whenever finds a match set the flag
			return_code=0
		fi
	done
	
	# Check flag's status for errors
	[ "$return_code" -eq 1 ] && printf "[error] no script found\n" && exit 1

	exit 0
}



# Script info retrieve all the information about a specific script which 
# is installed in the local binary folder.
script_info ()
{
	# check argument
	[ -z "$1" ] && printf "[error] missing script name\n\n" && exit 1

	# check if file exist and is regular
	[ ! -f "$script_dir/${1}" ] && printf "[error] file not found\n\n" && exit 1

	# egrep check for the first value and if finds it will ouput
	# if no patterns are found will return blank
	printf "%15s | %s\n" "title" "$(grep -m 1 '#title' $script_dir/${1} | cut -d'|' -f2)"
	printf "%15s | %s\n" "version" "$(grep -m 1 '#version' $script_dir/${1} | cut -d'|' -f2)"
	printf "%15s | %s\n" "author" "$(grep -m 1 '#author' $script_dir/${1} | cut -d'|' -f2)"
	printf "%15s | %s\n" "info" "$(grep -m 1 '#info' $script_dir/${1} | cut -d'|' -f2)"
	printf "\n"

	exit 0
}



# Function that parse all the argument given by the user
arg_parser ()
{
	# Check if there is no argument and if true show usage and exit 1
	[ $# -eq 0 ] && helpme exit 1

	# Cycle all the arguments 
	for args in $@
	do
		# Parse each argument to its function and set 
		case $args in
			-l | --list) 	header; script_list						;;
			-s | --search)	header; script_search	"$2" ; shift 2	;;
			-i | --info)	header; script_info		"$2" ; shift 2	;;
			-h | --help)			helpme							;;
			-v | --version) 		version	 						;;
			*)						helpme							;;
		esac
	done
}



# Initialize main function which will parse all the arguments.
arg_parser "$@"
